/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SolidPaint {
    /// Is the paint enabled?
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
    /// Overall opacity of paint (colors within the paint can also have opacity values which would blend with this)
    #[serde(rename = "opacity", skip_serializing_if = "Option::is_none")]
    pub opacity: Option<f64>,
    /// How this node blends with nodes behind it in the scene
    #[serde(rename = "blendMode")]
    pub blend_mode: models::BlendMode,
    /// The string literal \"SOLID\" representing the paint's type. Always check the `type` before reading other properties.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Solid color of the paint
    #[serde(rename = "color")]
    pub color: Box<models::Rgba>,
    #[serde(rename = "boundVariables", skip_serializing_if = "Option::is_none")]
    pub bound_variables: Option<Box<models::SolidPaintAllOfBoundVariables>>,
}

impl SolidPaint {
    pub fn new(blend_mode: models::BlendMode, r#type: Type, color: models::Rgba) -> SolidPaint {
        SolidPaint {
            visible: None,
            opacity: None,
            blend_mode,
            r#type,
            color: Box::new(color),
            bound_variables: None,
        }
    }
}
/// The string literal \"SOLID\" representing the paint's type. Always check the `type` before reading other properties.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "SOLID")]
    Solid,
}

impl Default for Type {
    fn default() -> Type {
        Self::Solid
    }
}

