/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TypePropertiesTrait {
    /// The raw characters in the text node.
    #[serde(rename = "characters")]
    pub characters: String,
    /// Style of text including font family and weight.
    #[serde(rename = "style")]
    pub style: Box<models::TypeStyle>,
    /// The array corresponds to characters in the text box, where each element references the 'styleOverrideTable' to apply specific styles to each character. The array's length can be less than or equal to the number of characters due to the removal of trailing zeros. Elements with a value of 0 indicate characters that use the default type style. If the array is shorter than the total number of characters, the characters beyond the array's length also use the default style.
    #[serde(rename = "characterStyleOverrides")]
    pub character_style_overrides: Vec<f64>,
    /// Internal property, preserved for backward compatibility. Avoid using this value.
    #[serde(rename = "layoutVersion", skip_serializing_if = "Option::is_none")]
    pub layout_version: Option<f64>,
    /// Map from ID to TypeStyle for looking up style overrides.
    #[serde(rename = "styleOverrideTable")]
    pub style_override_table: std::collections::HashMap<String, models::TypeStyle>,
    /// An array with the same number of elements as lines in the text node, where lines are delimited by newline or paragraph separator characters. Each element in the array corresponds to the list type of a specific line. List types are represented as string enums with one of these possible values:  - `NONE`: Not a list item. - `ORDERED`: Text is an ordered list (numbered). - `UNORDERED`: Text is an unordered list (bulleted).
    #[serde(rename = "lineTypes")]
    pub line_types: Vec<LineTypes>,
    /// An array with the same number of elements as lines in the text node, where lines are delimited by newline or paragraph separator characters. Each element in the array corresponds to the indentation level of a specific line.
    #[serde(rename = "lineIndentations")]
    pub line_indentations: Vec<f64>,
}

impl TypePropertiesTrait {
    pub fn new(characters: String, style: models::TypeStyle, character_style_overrides: Vec<f64>, style_override_table: std::collections::HashMap<String, models::TypeStyle>, line_types: Vec<LineTypes>, line_indentations: Vec<f64>) -> TypePropertiesTrait {
        TypePropertiesTrait {
            characters,
            style: Box::new(style),
            character_style_overrides,
            layout_version: None,
            style_override_table,
            line_types,
            line_indentations,
        }
    }
}
/// An array with the same number of elements as lines in the text node, where lines are delimited by newline or paragraph separator characters. Each element in the array corresponds to the list type of a specific line. List types are represented as string enums with one of these possible values:  - `NONE`: Not a list item. - `ORDERED`: Text is an ordered list (numbered). - `UNORDERED`: Text is an unordered list (bulleted).
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LineTypes {
    #[serde(rename = "NONE")]
    None,
    #[serde(rename = "ORDERED")]
    Ordered,
    #[serde(rename = "UNORDERED")]
    Unordered,
}

impl Default for LineTypes {
    fn default() -> LineTypes {
        Self::None
    }
}

