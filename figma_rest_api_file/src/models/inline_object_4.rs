/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineObject4 {
    /// The name of the file.
    #[serde(rename = "name")]
    pub name: String,
    /// The name of the project containing the file.
    #[serde(rename = "folder_name", skip_serializing_if = "Option::is_none")]
    pub folder_name: Option<String>,
    /// The UTC ISO 8601 time at which the file content was last modified.
    #[serde(rename = "last_touched_at")]
    pub last_touched_at: String,
    /// The user who created the file.
    #[serde(rename = "creator")]
    pub creator: Box<models::User>,
    /// The user who last modified the file contents.
    #[serde(rename = "last_touched_by", skip_serializing_if = "Option::is_none")]
    pub last_touched_by: Option<Box<models::User>>,
    /// A URL to a thumbnail image of the file.
    #[serde(rename = "thumbnail_url", skip_serializing_if = "Option::is_none")]
    pub thumbnail_url: Option<String>,
    /// The type of editor associated with this file.
    #[serde(rename = "editorType")]
    pub editor_type: EditorType,
    /// The role of the user making the API request in relation to the file.
    #[serde(rename = "role", skip_serializing_if = "Option::is_none")]
    pub role: Option<Role>,
    /// Access policy for users who have the link to the file.
    #[serde(rename = "link_access", skip_serializing_if = "Option::is_none")]
    pub link_access: Option<LinkAccess>,
    /// The URL of the file.
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    /// The version number of the file. This number is incremented when a file is modified and can be used to check if the file has changed between requests.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
}

impl InlineObject4 {
    pub fn new(name: String, last_touched_at: String, creator: models::User, editor_type: EditorType) -> InlineObject4 {
        InlineObject4 {
            name,
            folder_name: None,
            last_touched_at,
            creator: Box::new(creator),
            last_touched_by: None,
            thumbnail_url: None,
            editor_type,
            role: None,
            link_access: None,
            url: None,
            version: None,
        }
    }
}
/// The type of editor associated with this file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EditorType {
    #[serde(rename = "figma")]
    Figma,
    #[serde(rename = "figjam")]
    Figjam,
    #[serde(rename = "slides")]
    Slides,
}

impl Default for EditorType {
    fn default() -> EditorType {
        Self::Figma
    }
}
/// The role of the user making the API request in relation to the file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "owner")]
    Owner,
    #[serde(rename = "editor")]
    Editor,
    #[serde(rename = "viewer")]
    Viewer,
}

impl Default for Role {
    fn default() -> Role {
        Self::Owner
    }
}
/// Access policy for users who have the link to the file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LinkAccess {
    #[serde(rename = "view")]
    View,
    #[serde(rename = "edit")]
    Edit,
    #[serde(rename = "org_view")]
    OrgView,
    #[serde(rename = "org_edit")]
    OrgEdit,
    #[serde(rename = "inherit")]
    Inherit,
}

impl Default for LinkAccess {
    fn default() -> LinkAccess {
        Self::View
    }
}

