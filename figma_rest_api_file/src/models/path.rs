/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// Path : Defines a single path
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Path {
    /// A series of path commands that encodes how to draw the path.
    #[serde(rename = "path")]
    pub path: String,
    /// The winding rule for the path (same as in SVGs). This determines whether a given point in space is inside or outside the path.
    #[serde(rename = "windingRule")]
    pub winding_rule: WindingRule,
    /// If there is a per-region fill, this refers to an ID in the `fillOverrideTable`.
    #[serde(rename = "overrideID", skip_serializing_if = "Option::is_none")]
    pub override_id: Option<f64>,
}

impl Path {
    /// Defines a single path
    pub fn new(path: String, winding_rule: WindingRule) -> Path {
        Path {
            path,
            winding_rule,
            override_id: None,
        }
    }
}
/// The winding rule for the path (same as in SVGs). This determines whether a given point in space is inside or outside the path.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WindingRule {
    #[serde(rename = "NONZERO")]
    Nonzero,
    #[serde(rename = "EVENODD")]
    Evenodd,
}

impl Default for WindingRule {
    fn default() -> WindingRule {
        Self::Nonzero
    }
}

