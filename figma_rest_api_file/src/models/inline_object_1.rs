/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct InlineObject1 {
    /// The name of the file as it appears in the editor.
    #[serde(rename = "name")]
    pub name: String,
    /// The role of the user making the API request in relation to the file.
    #[serde(rename = "role")]
    pub role: Role,
    /// The UTC ISO 8601 time at which the file was last modified.
    #[serde(rename = "lastModified")]
    pub last_modified: String,
    /// The type of editor associated with this file.
    #[serde(rename = "editorType")]
    pub editor_type: EditorType,
    /// A URL to a thumbnail image of the file.
    #[serde(rename = "thumbnailUrl")]
    pub thumbnail_url: String,
    /// The version number of the file. This number is incremented when a file is modified and can be used to check if the file has changed between requests.
    #[serde(rename = "version")]
    pub version: String,
    /// A mapping from node IDs to node metadata.
    #[serde(rename = "nodes")]
    pub nodes: std::collections::HashMap<String, models::InlineObject1NodesValue>,
}

impl InlineObject1 {
    pub fn new(name: String, role: Role, last_modified: String, editor_type: EditorType, thumbnail_url: String, version: String, nodes: std::collections::HashMap<String, models::InlineObject1NodesValue>) -> InlineObject1 {
        InlineObject1 {
            name,
            role,
            last_modified,
            editor_type,
            thumbnail_url,
            version,
            nodes,
        }
    }
}
/// The role of the user making the API request in relation to the file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Role {
    #[serde(rename = "owner")]
    Owner,
    #[serde(rename = "editor")]
    Editor,
    #[serde(rename = "viewer")]
    Viewer,
}

impl Default for Role {
    fn default() -> Role {
        Self::Owner
    }
}
/// The type of editor associated with this file.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EditorType {
    #[serde(rename = "figma")]
    Figma,
    #[serde(rename = "figjam")]
    Figjam,
}

impl Default for EditorType {
    fn default() -> EditorType {
        Self::Figma
    }
}

