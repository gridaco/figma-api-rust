/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UpdateMediaRuntimeActionOneOf : An action that updates the runtime of a media node by playing, pausing, toggling play/pause,  muting, unmuting, or toggling mute/unmute.  The `destinationId` is the node ID of the media node to update. If `destinationId` is `null`, the action will  update the media node that contains the action.  The `mediaAction` is the action to perform on the media node.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateMediaRuntimeActionOneOf {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "destinationId", deserialize_with = "Option::deserialize")]
    pub destination_id: Option<String>,
    #[serde(rename = "mediaAction")]
    pub media_action: MediaAction,
}

impl UpdateMediaRuntimeActionOneOf {
    /// An action that updates the runtime of a media node by playing, pausing, toggling play/pause,  muting, unmuting, or toggling mute/unmute.  The `destinationId` is the node ID of the media node to update. If `destinationId` is `null`, the action will  update the media node that contains the action.  The `mediaAction` is the action to perform on the media node.
    pub fn new(r#type: Type, destination_id: Option<String>, media_action: MediaAction) -> UpdateMediaRuntimeActionOneOf {
        UpdateMediaRuntimeActionOneOf {
            r#type,
            destination_id,
            media_action,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "UPDATE_MEDIA_RUNTIME")]
    UpdateMediaRuntime,
}

impl Default for Type {
    fn default() -> Type {
        Self::UpdateMediaRuntime
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MediaAction {
    #[serde(rename = "PLAY")]
    Play,
    #[serde(rename = "PAUSE")]
    Pause,
    #[serde(rename = "TOGGLE_PLAY_PAUSE")]
    TogglePlayPause,
    #[serde(rename = "MUTE")]
    Mute,
    #[serde(rename = "UNMUTE")]
    Unmute,
    #[serde(rename = "TOGGLE_MUTE_UNMUTE")]
    ToggleMuteUnmute,
}

impl Default for MediaAction {
    fn default() -> MediaAction {
        Self::Play
    }
}

