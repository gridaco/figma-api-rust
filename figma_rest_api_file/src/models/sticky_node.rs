/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct StickyNode {
    /// A string uniquely identifying this node within the document.
    #[serde(rename = "id")]
    pub id: String,
    /// The name given to the node by the user in the tool.
    #[serde(rename = "name")]
    pub name: String,
    /// The type of this node, represented by the string literal \"STICKY\"
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Whether or not the node is visible on the canvas.
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
    /// If true, layer is locked and cannot be edited
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    /// Whether the layer is fixed while the parent is scrolling
    #[serde(rename = "isFixed", skip_serializing_if = "Option::is_none")]
    pub is_fixed: Option<bool>,
    /// How layer should be treated when the frame is resized
    #[serde(rename = "scrollBehavior")]
    pub scroll_behavior: ScrollBehavior,
    /// The rotation of the node, if not 0.
    #[serde(rename = "rotation", skip_serializing_if = "Option::is_none")]
    pub rotation: Option<f64>,
    /// A mapping of a layer's property to component property name of component properties attached to this node. The component property name can be used to look up more information on the corresponding component's or component set's componentPropertyDefinitions.
    #[serde(rename = "componentPropertyReferences", skip_serializing_if = "Option::is_none")]
    pub component_property_references: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "pluginData", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub plugin_data: Option<Option<serde_json::Value>>,
    #[serde(rename = "sharedPluginData", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shared_plugin_data: Option<Option<serde_json::Value>>,
    #[serde(rename = "boundVariables", skip_serializing_if = "Option::is_none")]
    pub bound_variables: Option<Box<models::IsLayerTraitBoundVariables>>,
    /// A mapping of variable collection ID to mode ID representing the explicitly set modes for this node.
    #[serde(rename = "explicitVariableModes", skip_serializing_if = "Option::is_none")]
    pub explicit_variable_modes: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "absoluteBoundingBox")]
    pub absolute_bounding_box: Box<models::Rectangle>,
    #[serde(rename = "absoluteRenderBounds")]
    pub absolute_render_bounds: Box<models::Rectangle>,
    /// Keep height and width constrained to same ratio.
    #[serde(rename = "preserveRatio", skip_serializing_if = "Option::is_none")]
    pub preserve_ratio: Option<bool>,
    /// Horizontal and vertical layout constraints for node.
    #[serde(rename = "constraints", skip_serializing_if = "Option::is_none")]
    pub constraints: Option<Box<models::LayoutConstraint>>,
    /// A transformation matrix is standard way in computer graphics to represent translation and rotation. These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1]. This is known as an affine transform and is enough to represent translation, rotation, and skew.  The identity transform is [[1, 0, 0], [0, 1, 0]].  A translation matrix will typically look like:  ``` [[1, 0, tx],   [0, 1, ty]] ```  and a rotation matrix will typically look like:  ``` [[cos(angle), sin(angle), 0],   [-sin(angle), cos(angle), 0]] ```  Another way to think about this transform is as three vectors:  - The x axis (t[0][0], t[1][0]) - The y axis (t[0][1], t[1][1]) - The translation offset (t[0][2], t[1][2])  The most common usage of the Transform matrix is the `relativeTransform property`. This particular usage of the matrix has a few additional restrictions. The translation offset can take on any value but we do enforce that the axis vectors are unit vectors (i.e. have length 1). The axes are not required to be at 90Â° angles to each other.
    #[serde(rename = "relativeTransform", skip_serializing_if = "Option::is_none")]
    pub relative_transform: Option<Vec<Vec<f64>>>,
    /// Width and height of element. This is different from the width and height of the bounding box in that the absolute bounding box represents the element after scaling and rotation. Only present if `geometry=paths` is passed.
    #[serde(rename = "size", skip_serializing_if = "Option::is_none")]
    pub size: Option<Box<models::Vector>>,
    ///  Determines if the layer should stretch along the parent's counter axis. This property is only provided for direct children of auto-layout frames.  - `INHERIT` - `STRETCH`  In previous versions of auto layout, determined how the layer is aligned inside an auto-layout frame. This property is only provided for direct children of auto-layout frames.  - `MIN` - `CENTER` - `MAX` - `STRETCH`  In horizontal auto-layout frames, \"MIN\" and \"MAX\" correspond to \"TOP\" and \"BOTTOM\". In vertical auto-layout frames, \"MIN\" and \"MAX\" correspond to \"LEFT\" and \"RIGHT\".
    #[serde(rename = "layoutAlign", skip_serializing_if = "Option::is_none")]
    pub layout_align: Option<LayoutAlign>,
    /// This property is applicable only for direct children of auto-layout frames, ignored otherwise. Determines whether a layer should stretch along the parent's primary axis. A `0` corresponds to a fixed size and `1` corresponds to stretch.
    #[serde(rename = "layoutGrow", skip_serializing_if = "Option::is_none")]
    pub layout_grow: Option<LayoutGrow>,
    /// Determines whether a layer's size and position should be determined by auto-layout settings or manually adjustable.
    #[serde(rename = "layoutPositioning", skip_serializing_if = "Option::is_none")]
    pub layout_positioning: Option<LayoutPositioning>,
    /// The minimum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
    #[serde(rename = "minWidth", skip_serializing_if = "Option::is_none")]
    pub min_width: Option<f64>,
    /// The maximum width of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
    #[serde(rename = "maxWidth", skip_serializing_if = "Option::is_none")]
    pub max_width: Option<f64>,
    /// The minimum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
    #[serde(rename = "minHeight", skip_serializing_if = "Option::is_none")]
    pub min_height: Option<f64>,
    /// The maximum height of the frame. This property is only applicable for auto-layout frames or direct children of auto-layout frames.
    #[serde(rename = "maxHeight", skip_serializing_if = "Option::is_none")]
    pub max_height: Option<f64>,
    /// The horizontal sizing setting on this auto-layout frame or frame child. - `FIXED` - `HUG`: only valid on auto-layout frames and text nodes - `FILL`: only valid on auto-layout frame children
    #[serde(rename = "layoutSizingHorizontal", skip_serializing_if = "Option::is_none")]
    pub layout_sizing_horizontal: Option<LayoutSizingHorizontal>,
    /// The vertical sizing setting on this auto-layout frame or frame child. - `FIXED` - `HUG`: only valid on auto-layout frames and text nodes - `FILL`: only valid on auto-layout frame children
    #[serde(rename = "layoutSizingVertical", skip_serializing_if = "Option::is_none")]
    pub layout_sizing_vertical: Option<LayoutSizingVertical>,
    /// How this node blends with nodes behind it in the scene (see blend mode section for more details)
    #[serde(rename = "blendMode")]
    pub blend_mode: models::BlendMode,
    /// Opacity of the node
    #[serde(rename = "opacity", skip_serializing_if = "Option::is_none")]
    pub opacity: Option<f64>,
    /// An array of fill paints applied to the node.
    #[serde(rename = "fills")]
    pub fills: Vec<models::Paint>,
    /// A mapping of a StyleType to style ID (see Style) of styles present on this node. The style ID can be used to look up more information about the style in the top-level styles field.
    #[serde(rename = "styles", skip_serializing_if = "Option::is_none")]
    pub styles: Option<std::collections::HashMap<String, String>>,
    /// Does this node mask sibling nodes in front of it?
    #[serde(rename = "isMask", skip_serializing_if = "Option::is_none")]
    pub is_mask: Option<bool>,
    /// If this layer is a mask, this property describes the operation used to mask the layer's siblings. The value may be one of the following:  - ALPHA: the mask node's alpha channel will be used to determine the opacity of each pixel in the masked result. - VECTOR: if the mask node has visible fill paints, every pixel inside the node's fill regions will be fully visible in the masked result. If the mask has visible stroke paints, every pixel inside the node's stroke regions will be fully visible in the masked result. - LUMINANCE: the luminance value of each pixel of the mask node will be used to determine the opacity of that pixel in the masked result.
    #[serde(rename = "maskType", skip_serializing_if = "Option::is_none")]
    pub mask_type: Option<MaskType>,
    /// True if maskType is VECTOR. This field is deprecated; use maskType instead.
    #[serde(rename = "isMaskOutline", skip_serializing_if = "Option::is_none")]
    pub is_mask_outline: Option<bool>,
    /// An array of effects attached to this node (see effects section for more details)
    #[serde(rename = "effects")]
    pub effects: Vec<models::Effect>,
    /// An array of export settings representing images to export from the node.
    #[serde(rename = "exportSettings", skip_serializing_if = "Option::is_none")]
    pub export_settings: Option<Vec<models::ExportSetting>>,
    /// Text contained within a text box.
    #[serde(rename = "characters")]
    pub characters: String,
    /// If true, author name is visible.
    #[serde(rename = "authorVisible", skip_serializing_if = "Option::is_none")]
    pub author_visible: Option<bool>,
}

impl StickyNode {
    pub fn new(id: String, name: String, r#type: Type, scroll_behavior: ScrollBehavior, absolute_bounding_box: models::Rectangle, absolute_render_bounds: models::Rectangle, blend_mode: models::BlendMode, fills: Vec<models::Paint>, effects: Vec<models::Effect>, characters: String) -> StickyNode {
        StickyNode {
            id,
            name,
            r#type,
            visible: None,
            locked: None,
            is_fixed: None,
            scroll_behavior,
            rotation: None,
            component_property_references: None,
            plugin_data: None,
            shared_plugin_data: None,
            bound_variables: None,
            explicit_variable_modes: None,
            absolute_bounding_box: Box::new(absolute_bounding_box),
            absolute_render_bounds: Box::new(absolute_render_bounds),
            preserve_ratio: None,
            constraints: None,
            relative_transform: None,
            size: None,
            layout_align: None,
            layout_grow: None,
            layout_positioning: None,
            min_width: None,
            max_width: None,
            min_height: None,
            max_height: None,
            layout_sizing_horizontal: None,
            layout_sizing_vertical: None,
            blend_mode,
            opacity: None,
            fills,
            styles: None,
            is_mask: None,
            mask_type: None,
            is_mask_outline: None,
            effects,
            export_settings: None,
            characters,
            author_visible: None,
        }
    }
}
/// The type of this node, represented by the string literal \"STICKY\"
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "STICKY")]
    Sticky,
}

impl Default for Type {
    fn default() -> Type {
        Self::Sticky
    }
}
/// How layer should be treated when the frame is resized
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScrollBehavior {
    #[serde(rename = "SCROLLS")]
    Scrolls,
    #[serde(rename = "FIXED")]
    Fixed,
    #[serde(rename = "STICKY_SCROLLS")]
    StickyScrolls,
}

impl Default for ScrollBehavior {
    fn default() -> ScrollBehavior {
        Self::Scrolls
    }
}
///  Determines if the layer should stretch along the parent's counter axis. This property is only provided for direct children of auto-layout frames.  - `INHERIT` - `STRETCH`  In previous versions of auto layout, determined how the layer is aligned inside an auto-layout frame. This property is only provided for direct children of auto-layout frames.  - `MIN` - `CENTER` - `MAX` - `STRETCH`  In horizontal auto-layout frames, \"MIN\" and \"MAX\" correspond to \"TOP\" and \"BOTTOM\". In vertical auto-layout frames, \"MIN\" and \"MAX\" correspond to \"LEFT\" and \"RIGHT\".
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LayoutAlign {
    #[serde(rename = "INHERIT")]
    Inherit,
    #[serde(rename = "STRETCH")]
    Stretch,
    #[serde(rename = "MIN")]
    Min,
    #[serde(rename = "CENTER")]
    Center,
    #[serde(rename = "MAX")]
    Max,
}

impl Default for LayoutAlign {
    fn default() -> LayoutAlign {
        Self::Inherit
    }
}
/// This property is applicable only for direct children of auto-layout frames, ignored otherwise. Determines whether a layer should stretch along the parent's primary axis. A `0` corresponds to a fixed size and `1` corresponds to stretch.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LayoutGrow {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "1")]
    Variant1,
}

impl Default for LayoutGrow {
    fn default() -> LayoutGrow {
        Self::Variant0
    }
}
/// Determines whether a layer's size and position should be determined by auto-layout settings or manually adjustable.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LayoutPositioning {
    #[serde(rename = "AUTO")]
    Auto,
    #[serde(rename = "ABSOLUTE")]
    Absolute,
}

impl Default for LayoutPositioning {
    fn default() -> LayoutPositioning {
        Self::Auto
    }
}
/// The horizontal sizing setting on this auto-layout frame or frame child. - `FIXED` - `HUG`: only valid on auto-layout frames and text nodes - `FILL`: only valid on auto-layout frame children
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LayoutSizingHorizontal {
    #[serde(rename = "FIXED")]
    Fixed,
    #[serde(rename = "HUG")]
    Hug,
    #[serde(rename = "FILL")]
    Fill,
}

impl Default for LayoutSizingHorizontal {
    fn default() -> LayoutSizingHorizontal {
        Self::Fixed
    }
}
/// The vertical sizing setting on this auto-layout frame or frame child. - `FIXED` - `HUG`: only valid on auto-layout frames and text nodes - `FILL`: only valid on auto-layout frame children
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LayoutSizingVertical {
    #[serde(rename = "FIXED")]
    Fixed,
    #[serde(rename = "HUG")]
    Hug,
    #[serde(rename = "FILL")]
    Fill,
}

impl Default for LayoutSizingVertical {
    fn default() -> LayoutSizingVertical {
        Self::Fixed
    }
}
/// If this layer is a mask, this property describes the operation used to mask the layer's siblings. The value may be one of the following:  - ALPHA: the mask node's alpha channel will be used to determine the opacity of each pixel in the masked result. - VECTOR: if the mask node has visible fill paints, every pixel inside the node's fill regions will be fully visible in the masked result. If the mask has visible stroke paints, every pixel inside the node's stroke regions will be fully visible in the masked result. - LUMINANCE: the luminance value of each pixel of the mask node will be used to determine the opacity of that pixel in the masked result.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum MaskType {
    #[serde(rename = "ALPHA")]
    Alpha,
    #[serde(rename = "VECTOR")]
    Vector,
    #[serde(rename = "LUMINANCE")]
    Luminance,
}

impl Default for MaskType {
    fn default() -> MaskType {
        Self::Alpha
    }
}

