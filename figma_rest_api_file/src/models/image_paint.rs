/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ImagePaint {
    /// Is the paint enabled?
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
    /// Overall opacity of paint (colors within the paint can also have opacity values which would blend with this)
    #[serde(rename = "opacity", skip_serializing_if = "Option::is_none")]
    pub opacity: Option<f64>,
    /// How this node blends with nodes behind it in the scene
    #[serde(rename = "blendMode")]
    pub blend_mode: models::BlendMode,
    /// The string literal \"IMAGE\" representing the paint's type. Always check the `type` before reading other properties.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Image scaling mode.
    #[serde(rename = "scaleMode")]
    pub scale_mode: ScaleMode,
    /// A reference to an image embedded in this node. To download the image using this reference, use the `GET file images` endpoint to retrieve the mapping from image references to image URLs.
    #[serde(rename = "imageRef")]
    pub image_ref: String,
    /// A transformation matrix is standard way in computer graphics to represent translation and rotation. These are the top two rows of a 3x3 matrix. The bottom row of the matrix is assumed to be [0, 0, 1]. This is known as an affine transform and is enough to represent translation, rotation, and skew.  The identity transform is [[1, 0, 0], [0, 1, 0]].  A translation matrix will typically look like:  ``` [[1, 0, tx],   [0, 1, ty]] ```  and a rotation matrix will typically look like:  ``` [[cos(angle), sin(angle), 0],   [-sin(angle), cos(angle), 0]] ```  Another way to think about this transform is as three vectors:  - The x axis (t[0][0], t[1][0]) - The y axis (t[0][1], t[1][1]) - The translation offset (t[0][2], t[1][2])  The most common usage of the Transform matrix is the `relativeTransform property`. This particular usage of the matrix has a few additional restrictions. The translation offset can take on any value but we do enforce that the axis vectors are unit vectors (i.e. have length 1). The axes are not required to be at 90Â° angles to each other.
    #[serde(rename = "imageTransform", skip_serializing_if = "Option::is_none")]
    pub image_transform: Option<Vec<Vec<f64>>>,
    /// Amount image is scaled by in tiling, only present if scaleMode is `TILE`.
    #[serde(rename = "scalingFactor", skip_serializing_if = "Option::is_none")]
    pub scaling_factor: Option<f64>,
    /// Defines what image filters have been applied to this paint, if any. If this property is not defined, no filters have been applied.
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Box<models::ImageFilters>>,
    /// Image rotation, in degrees.
    #[serde(rename = "rotation", skip_serializing_if = "Option::is_none")]
    pub rotation: Option<f64>,
    /// A reference to an animated GIF embedded in this node. To download the image using this reference, use the `GET file images` endpoint to retrieve the mapping from image references to image URLs.
    #[serde(rename = "gifRef", skip_serializing_if = "Option::is_none")]
    pub gif_ref: Option<String>,
}

impl ImagePaint {
    pub fn new(blend_mode: models::BlendMode, r#type: Type, scale_mode: ScaleMode, image_ref: String) -> ImagePaint {
        ImagePaint {
            visible: None,
            opacity: None,
            blend_mode,
            r#type,
            scale_mode,
            image_ref,
            image_transform: None,
            scaling_factor: None,
            filters: None,
            rotation: None,
            gif_ref: None,
        }
    }
}
/// The string literal \"IMAGE\" representing the paint's type. Always check the `type` before reading other properties.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "IMAGE")]
    Image,
}

impl Default for Type {
    fn default() -> Type {
        Self::Image
    }
}
/// Image scaling mode.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScaleMode {
    #[serde(rename = "FILL")]
    Fill,
    #[serde(rename = "FIT")]
    Fit,
    #[serde(rename = "TILE")]
    Tile,
    #[serde(rename = "STRETCH")]
    Stretch,
}

impl Default for ScaleMode {
    fn default() -> ScaleMode {
        Self::Fill
    }
}

