/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TextPathTypeStyle {
    /// Font family of text (standard name).
    #[serde(rename = "fontFamily", skip_serializing_if = "Option::is_none")]
    pub font_family: Option<String>,
    /// PostScript font name.
    #[serde(rename = "fontPostScriptName", skip_serializing_if = "Option::is_none")]
    pub font_post_script_name: Option<String>,
    /// Describes visual weight or emphasis, such as Bold or Italic.
    #[serde(rename = "fontStyle", skip_serializing_if = "Option::is_none")]
    pub font_style: Option<String>,
    /// Whether or not text is italicized.
    #[serde(rename = "italic", skip_serializing_if = "Option::is_none")]
    pub italic: Option<bool>,
    /// Numeric font weight.
    #[serde(rename = "fontWeight", skip_serializing_if = "Option::is_none")]
    pub font_weight: Option<f64>,
    /// Font size in px.
    #[serde(rename = "fontSize", skip_serializing_if = "Option::is_none")]
    pub font_size: Option<f64>,
    /// Text casing applied to the node, default is the original casing.
    #[serde(rename = "textCase", skip_serializing_if = "Option::is_none")]
    pub text_case: Option<TextCase>,
    /// Horizontal text alignment as string enum.
    #[serde(rename = "textAlignHorizontal", skip_serializing_if = "Option::is_none")]
    pub text_align_horizontal: Option<TextAlignHorizontal>,
    /// Vertical text alignment as string enum.
    #[serde(rename = "textAlignVertical", skip_serializing_if = "Option::is_none")]
    pub text_align_vertical: Option<TextAlignVertical>,
    /// Space between characters in px.
    #[serde(rename = "letterSpacing", skip_serializing_if = "Option::is_none")]
    pub letter_spacing: Option<f64>,
    /// An array of fill paints applied to the characters.
    #[serde(rename = "fills", skip_serializing_if = "Option::is_none")]
    pub fills: Option<Vec<models::Paint>>,
    /// Link to a URL or frame.
    #[serde(rename = "hyperlink", skip_serializing_if = "Option::is_none")]
    pub hyperlink: Option<Box<models::Hyperlink>>,
    /// A map of OpenType feature flags to 1 or 0, 1 if it is enabled and 0 if it is disabled. Note that some flags aren't reflected here. For example, SMCP (small caps) is still represented by the `textCase` field.
    #[serde(rename = "opentypeFlags", skip_serializing_if = "Option::is_none")]
    pub opentype_flags: Option<std::collections::HashMap<String, f64>>,
    /// Indicates how the font weight was overridden when there is a text style override.
    #[serde(rename = "semanticWeight", skip_serializing_if = "Option::is_none")]
    pub semantic_weight: Option<SemanticWeight>,
    /// Indicates how the font style was overridden when there is a text style override.
    #[serde(rename = "semanticItalic", skip_serializing_if = "Option::is_none")]
    pub semantic_italic: Option<SemanticItalic>,
    /// Whether or not this style has overrides over a text style. The possible fields to override are semanticWeight, semanticItalic, and hyperlink. If this is true, then those fields are overrides if present.
    #[serde(rename = "isOverrideOverTextStyle", skip_serializing_if = "Option::is_none")]
    pub is_override_over_text_style: Option<bool>,
    #[serde(rename = "boundVariables", skip_serializing_if = "Option::is_none")]
    pub bound_variables: Option<Box<models::TextPathTypeStyleAllOfBoundVariables>>,
}

impl TextPathTypeStyle {
    pub fn new() -> TextPathTypeStyle {
        TextPathTypeStyle {
            font_family: None,
            font_post_script_name: None,
            font_style: None,
            italic: None,
            font_weight: None,
            font_size: None,
            text_case: None,
            text_align_horizontal: None,
            text_align_vertical: None,
            letter_spacing: None,
            fills: None,
            hyperlink: None,
            opentype_flags: None,
            semantic_weight: None,
            semantic_italic: None,
            is_override_over_text_style: None,
            bound_variables: None,
        }
    }
}
/// Text casing applied to the node, default is the original casing.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TextCase {
    #[serde(rename = "UPPER")]
    Upper,
    #[serde(rename = "LOWER")]
    Lower,
    #[serde(rename = "TITLE")]
    Title,
    #[serde(rename = "SMALL_CAPS")]
    SmallCaps,
    #[serde(rename = "SMALL_CAPS_FORCED")]
    SmallCapsForced,
}

impl Default for TextCase {
    fn default() -> TextCase {
        Self::Upper
    }
}
/// Horizontal text alignment as string enum.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TextAlignHorizontal {
    #[serde(rename = "LEFT")]
    Left,
    #[serde(rename = "RIGHT")]
    Right,
    #[serde(rename = "CENTER")]
    Center,
    #[serde(rename = "JUSTIFIED")]
    Justified,
}

impl Default for TextAlignHorizontal {
    fn default() -> TextAlignHorizontal {
        Self::Left
    }
}
/// Vertical text alignment as string enum.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TextAlignVertical {
    #[serde(rename = "TOP")]
    Top,
    #[serde(rename = "CENTER")]
    Center,
    #[serde(rename = "BOTTOM")]
    Bottom,
}

impl Default for TextAlignVertical {
    fn default() -> TextAlignVertical {
        Self::Top
    }
}
/// Indicates how the font weight was overridden when there is a text style override.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SemanticWeight {
    #[serde(rename = "BOLD")]
    Bold,
    #[serde(rename = "NORMAL")]
    Normal,
}

impl Default for SemanticWeight {
    fn default() -> SemanticWeight {
        Self::Bold
    }
}
/// Indicates how the font style was overridden when there is a text style override.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SemanticItalic {
    #[serde(rename = "ITALIC")]
    Italic,
    #[serde(rename = "NORMAL")]
    Normal,
}

impl Default for SemanticItalic {
    fn default() -> SemanticItalic {
        Self::Italic
    }
}

