/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ConditionalAction : Checks if a condition is met before performing certain actions by using an if/else conditional statement.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ConditionalAction {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "conditionalBlocks")]
    pub conditional_blocks: Vec<models::ConditionalBlock>,
}

impl ConditionalAction {
    /// Checks if a condition is met before performing certain actions by using an if/else conditional statement.
    pub fn new(r#type: Type, conditional_blocks: Vec<models::ConditionalBlock>) -> ConditionalAction {
        ConditionalAction {
            r#type,
            conditional_blocks,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "CONDITIONAL")]
    Conditional,
}

impl Default for Type {
    fn default() -> Type {
        Self::Conditional
    }
}

