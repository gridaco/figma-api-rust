/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// LocalVariable : A Variable is a single design token that defines values for each of the modes in its VariableCollection. These values can be applied to various kinds of design properties.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LocalVariable {
    /// The unique identifier of this variable.
    #[serde(rename = "id")]
    pub id: String,
    /// The name of this variable.
    #[serde(rename = "name")]
    pub name: String,
    /// The key of this variable.
    #[serde(rename = "key")]
    pub key: String,
    /// The id of the variable collection that contains this variable.
    #[serde(rename = "variableCollectionId")]
    pub variable_collection_id: String,
    /// The resolved type of the variable.
    #[serde(rename = "resolvedType")]
    pub resolved_type: ResolvedType,
    /// The values for each mode of this variable.
    #[serde(rename = "valuesByMode")]
    pub values_by_mode: std::collections::HashMap<String, models::LocalVariableValuesByModeValue>,
    /// Whether this variable is remote.
    #[serde(rename = "remote")]
    pub remote: bool,
    /// The description of this variable.
    #[serde(rename = "description")]
    pub description: String,
    /// Whether this variable is hidden when publishing the current file as a library.  If the parent `VariableCollection` is marked as `hiddenFromPublishing`, then this variable will also be hidden from publishing via the UI. `hiddenFromPublishing` is independently toggled for a variable and collection. However, both must be true for a given variable to be publishable.
    #[serde(rename = "hiddenFromPublishing")]
    pub hidden_from_publishing: bool,
    /// An array of scopes in the UI where this variable is shown. Setting this property will show/hide this variable in the variable picker UI for different fields.  Setting scopes for a variable does not prevent that variable from being bound in other scopes (for example, via the Plugin API). This only limits the variables that are shown in pickers within the Figma UI.
    #[serde(rename = "scopes")]
    pub scopes: Vec<models::VariableScope>,
    #[serde(rename = "codeSyntax")]
    pub code_syntax: Box<models::VariableCodeSyntax>,
    /// Indicates that the variable was deleted in the editor, but the document may still contain references to the variable. References to the variable may exist through bound values or variable aliases.
    #[serde(rename = "deletedButReferenced", skip_serializing_if = "Option::is_none")]
    pub deleted_but_referenced: Option<bool>,
}

impl LocalVariable {
    /// A Variable is a single design token that defines values for each of the modes in its VariableCollection. These values can be applied to various kinds of design properties.
    pub fn new(id: String, name: String, key: String, variable_collection_id: String, resolved_type: ResolvedType, values_by_mode: std::collections::HashMap<String, models::LocalVariableValuesByModeValue>, remote: bool, description: String, hidden_from_publishing: bool, scopes: Vec<models::VariableScope>, code_syntax: models::VariableCodeSyntax) -> LocalVariable {
        LocalVariable {
            id,
            name,
            key,
            variable_collection_id,
            resolved_type,
            values_by_mode,
            remote,
            description,
            hidden_from_publishing,
            scopes,
            code_syntax: Box::new(code_syntax),
            deleted_but_referenced: None,
        }
    }
}
/// The resolved type of the variable.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResolvedType {
    #[serde(rename = "BOOLEAN")]
    Boolean,
    #[serde(rename = "FLOAT")]
    Float,
    #[serde(rename = "STRING")]
    String,
    #[serde(rename = "COLOR")]
    Color,
}

impl Default for ResolvedType {
    fn default() -> ResolvedType {
        Self::Boolean
    }
}

