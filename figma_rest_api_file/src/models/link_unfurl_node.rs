/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LinkUnfurlNode {
    /// A string uniquely identifying this node within the document.
    #[serde(rename = "id")]
    pub id: String,
    /// The name given to the node by the user in the tool.
    #[serde(rename = "name")]
    pub name: String,
    /// The type of this node, represented by the string literal \"LINK_UNFURL\"
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Whether or not the node is visible on the canvas.
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
    /// If true, layer is locked and cannot be edited
    #[serde(rename = "locked", skip_serializing_if = "Option::is_none")]
    pub locked: Option<bool>,
    /// Whether the layer is fixed while the parent is scrolling
    #[serde(rename = "isFixed", skip_serializing_if = "Option::is_none")]
    pub is_fixed: Option<bool>,
    /// How layer should be treated when the frame is resized
    #[serde(rename = "scrollBehavior")]
    pub scroll_behavior: ScrollBehavior,
    /// The rotation of the node, if not 0.
    #[serde(rename = "rotation", skip_serializing_if = "Option::is_none")]
    pub rotation: Option<f64>,
    /// A mapping of a layer's property to component property name of component properties attached to this node. The component property name can be used to look up more information on the corresponding component's or component set's componentPropertyDefinitions.
    #[serde(rename = "componentPropertyReferences", skip_serializing_if = "Option::is_none")]
    pub component_property_references: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "pluginData", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub plugin_data: Option<Option<serde_json::Value>>,
    #[serde(rename = "sharedPluginData", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub shared_plugin_data: Option<Option<serde_json::Value>>,
    #[serde(rename = "boundVariables", skip_serializing_if = "Option::is_none")]
    pub bound_variables: Option<Box<models::IsLayerTraitBoundVariables>>,
    /// A mapping of variable collection ID to mode ID representing the explicitly set modes for this node.
    #[serde(rename = "explicitVariableModes", skip_serializing_if = "Option::is_none")]
    pub explicit_variable_modes: Option<std::collections::HashMap<String, String>>,
    /// An array of export settings representing images to export from the node.
    #[serde(rename = "exportSettings", skip_serializing_if = "Option::is_none")]
    pub export_settings: Option<Vec<models::ExportSetting>>,
}

impl LinkUnfurlNode {
    pub fn new(id: String, name: String, r#type: Type, scroll_behavior: ScrollBehavior) -> LinkUnfurlNode {
        LinkUnfurlNode {
            id,
            name,
            r#type,
            visible: None,
            locked: None,
            is_fixed: None,
            scroll_behavior,
            rotation: None,
            component_property_references: None,
            plugin_data: None,
            shared_plugin_data: None,
            bound_variables: None,
            explicit_variable_modes: None,
            export_settings: None,
        }
    }
}
/// The type of this node, represented by the string literal \"LINK_UNFURL\"
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "LINK_UNFURL")]
    LinkUnfurl,
}

impl Default for Type {
    fn default() -> Type {
        Self::LinkUnfurl
    }
}
/// How layer should be treated when the frame is resized
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ScrollBehavior {
    #[serde(rename = "SCROLLS")]
    Scrolls,
    #[serde(rename = "FIXED")]
    Fixed,
    #[serde(rename = "STICKY_SCROLLS")]
    StickyScrolls,
}

impl Default for ScrollBehavior {
    fn default() -> ScrollBehavior {
        Self::Scrolls
    }
}

