/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatternPaint {
    /// Is the paint enabled?
    #[serde(rename = "visible", skip_serializing_if = "Option::is_none")]
    pub visible: Option<bool>,
    /// Overall opacity of paint (colors within the paint can also have opacity values which would blend with this)
    #[serde(rename = "opacity", skip_serializing_if = "Option::is_none")]
    pub opacity: Option<f64>,
    /// How this node blends with nodes behind it in the scene
    #[serde(rename = "blendMode")]
    pub blend_mode: models::BlendMode,
    /// The string literal \"PATTERN\" representing the paint's type. Always check the `type` before reading other properties.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The node id of the source node for the pattern
    #[serde(rename = "sourceNodeId")]
    pub source_node_id: String,
    /// The tile type for the pattern
    #[serde(rename = "tileType")]
    pub tile_type: TileType,
    /// The scaling factor for the pattern
    #[serde(rename = "scalingFactor")]
    pub scaling_factor: f64,
    /// The spacing for the pattern
    #[serde(rename = "spacing")]
    pub spacing: Box<models::Vector>,
    /// The horizontal alignment for the pattern
    #[serde(rename = "horizontalAlignment")]
    pub horizontal_alignment: HorizontalAlignment,
    /// The vertical alignment for the pattern
    #[serde(rename = "verticalAlignment")]
    pub vertical_alignment: VerticalAlignment,
}

impl PatternPaint {
    pub fn new(blend_mode: models::BlendMode, r#type: Type, source_node_id: String, tile_type: TileType, scaling_factor: f64, spacing: models::Vector, horizontal_alignment: HorizontalAlignment, vertical_alignment: VerticalAlignment) -> PatternPaint {
        PatternPaint {
            visible: None,
            opacity: None,
            blend_mode,
            r#type,
            source_node_id,
            tile_type,
            scaling_factor,
            spacing: Box::new(spacing),
            horizontal_alignment,
            vertical_alignment,
        }
    }
}
/// The string literal \"PATTERN\" representing the paint's type. Always check the `type` before reading other properties.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "PATTERN")]
    Pattern,
}

impl Default for Type {
    fn default() -> Type {
        Self::Pattern
    }
}
/// The tile type for the pattern
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TileType {
    #[serde(rename = "RECTANGULAR")]
    Rectangular,
    #[serde(rename = "HORIZONTAL_HEXAGONAL")]
    HorizontalHexagonal,
    #[serde(rename = "VERTICAL_HEXAGONAL")]
    VerticalHexagonal,
}

impl Default for TileType {
    fn default() -> TileType {
        Self::Rectangular
    }
}
/// The horizontal alignment for the pattern
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum HorizontalAlignment {
    #[serde(rename = "START")]
    Start,
    #[serde(rename = "CENTER")]
    Center,
    #[serde(rename = "END")]
    End,
}

impl Default for HorizontalAlignment {
    fn default() -> HorizontalAlignment {
        Self::Start
    }
}
/// The vertical alignment for the pattern
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VerticalAlignment {
    #[serde(rename = "START")]
    Start,
    #[serde(rename = "CENTER")]
    Center,
    #[serde(rename = "END")]
    End,
}

impl Default for VerticalAlignment {
    fn default() -> VerticalAlignment {
        Self::Start
    }
}

