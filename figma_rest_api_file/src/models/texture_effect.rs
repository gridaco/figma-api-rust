/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TextureEffect : A texture effect
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TextureEffect {
    /// The string literal 'TEXTURE' representing the effect's type. Always check the type before reading other properties.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// The size of the texture effect
    #[serde(rename = "noiseSize")]
    pub noise_size: f64,
    /// The radius of the texture effect
    #[serde(rename = "radius")]
    pub radius: f64,
    /// Whether the texture is clipped to the shape
    #[serde(rename = "clipToShape")]
    pub clip_to_shape: bool,
}

impl TextureEffect {
    /// A texture effect
    pub fn new(r#type: Type, noise_size: f64, radius: f64, clip_to_shape: bool) -> TextureEffect {
        TextureEffect {
            r#type,
            noise_size,
            radius,
            clip_to_shape,
        }
    }
}
/// The string literal 'TEXTURE' representing the effect's type. Always check the type before reading other properties.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "TEXTURE")]
    Texture,
}

impl Default for Type {
    fn default() -> Type {
        Self::Texture
    }
}

