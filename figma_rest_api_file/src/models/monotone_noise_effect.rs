/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct MonotoneNoiseEffect {
    /// The string literal 'NOISE' representing the effect's type. Always check the type before reading other properties.
    #[serde(rename = "type")]
    pub r#type: Type,
    /// Blend mode of the noise effect
    #[serde(rename = "blendMode")]
    pub blend_mode: models::BlendMode,
    /// The size of the noise effect
    #[serde(rename = "noiseSize")]
    pub noise_size: f64,
    /// The density of the noise effect
    #[serde(rename = "density")]
    pub density: f64,
    /// The string literal 'MONOTONE' representing the noise type.
    #[serde(rename = "noiseType")]
    pub noise_type: NoiseType,
}

impl MonotoneNoiseEffect {
    pub fn new(r#type: Type, blend_mode: models::BlendMode, noise_size: f64, density: f64, noise_type: NoiseType) -> MonotoneNoiseEffect {
        MonotoneNoiseEffect {
            r#type,
            blend_mode,
            noise_size,
            density,
            noise_type,
        }
    }
}
/// The string literal 'NOISE' representing the effect's type. Always check the type before reading other properties.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "NOISE")]
    Noise,
}

impl Default for Type {
    fn default() -> Type {
        Self::Noise
    }
}
/// The string literal 'MONOTONE' representing the noise type.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum NoiseType {
    #[serde(rename = "MONOTONE")]
    Monotone,
}

impl Default for NoiseType {
    fn default() -> NoiseType {
        Self::Monotone
    }
}

