/*
 * Figma API
 *
 * This is the OpenAPI specification for the [Figma REST API](https://www.figma.com/developers/api).  Note: we are releasing the OpenAPI specification as a beta given the large surface area and complexity of the REST API. If you notice any inaccuracies with the specification, please [file an issue](https://github.com/figma/rest-api-spec/issues).
 *
 * The version of the OpenAPI document: 0.31.0
 * Contact: support@figma.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// NodeAction : An action that navigates to a specific node in the Figma viewer.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct NodeAction {
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "destinationId", deserialize_with = "Option::deserialize")]
    pub destination_id: Option<String>,
    #[serde(rename = "navigation")]
    pub navigation: models::Navigation,
    #[serde(rename = "transition", deserialize_with = "Option::deserialize")]
    pub transition: Option<Box<models::Transition>>,
    /// Whether the scroll offsets of any scrollable elements in the current screen or overlay are preserved when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
    #[serde(rename = "preserveScrollPosition", skip_serializing_if = "Option::is_none")]
    pub preserve_scroll_position: Option<bool>,
    /// Applicable only when `navigation` is `\"OVERLAY\"` and the destination is a frame with `overlayPosition` equal to `\"MANUAL\"`. This value represents the offset by which the overlay is opened relative to this node.
    #[serde(rename = "overlayRelativePosition", skip_serializing_if = "Option::is_none")]
    pub overlay_relative_position: Option<Box<models::Vector>>,
    /// When true, all videos within the destination frame will reset their memorized playback position to 00:00 before starting to play.
    #[serde(rename = "resetVideoPosition", skip_serializing_if = "Option::is_none")]
    pub reset_video_position: Option<bool>,
    /// Whether the scroll offsets of any scrollable elements in the current screen or overlay reset when navigating to the destination. This is applicable only if the layout of both the current frame and its destination are the same.
    #[serde(rename = "resetScrollPosition", skip_serializing_if = "Option::is_none")]
    pub reset_scroll_position: Option<bool>,
    /// Whether the state of any interactive components in the current screen or overlay reset when navigating to the destination. This is applicable if there are interactive components in the destination frame.
    #[serde(rename = "resetInteractiveComponents", skip_serializing_if = "Option::is_none")]
    pub reset_interactive_components: Option<bool>,
}

impl NodeAction {
    /// An action that navigates to a specific node in the Figma viewer.
    pub fn new(r#type: Type, destination_id: Option<String>, navigation: models::Navigation, transition: Option<models::Transition>) -> NodeAction {
        NodeAction {
            r#type,
            destination_id,
            navigation,
            transition: if let Some(x) = transition {Some(Box::new(x))} else {None},
            preserve_scroll_position: None,
            overlay_relative_position: None,
            reset_video_position: None,
            reset_scroll_position: None,
            reset_interactive_components: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "NODE")]
    Node,
}

impl Default for Type {
    fn default() -> Type {
        Self::Node
    }
}

